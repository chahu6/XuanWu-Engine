#pragma once
{{#include_headfiles}}
#include "{{headfile_name}}"
{{/include_headfiles}}

namespace XuanWu
{
    {{#class_defines}}
    class {{class_name}};
    {{/class_defines}}

    namespace Reflection
    {
        {{#class_defines}}
        namespace TypeFieldReflectionOperator
        {
            class Type{{class_name}}Operator
            {
            public:
                static const char* GetClassName() { return "{{class_name}}"; }
                
                //base class
                static int GetColorBaseClassReflectionInstanceList(ReflectionInstance*& out_list, void* instance)
                {
                    int count = {{class_base_class_size}};
                    {{#class_has_base}}
                    out_list = new ReflectionInstance[count];
                    for(int i = 0 ; i < count; ++i)
                    {
                        {{#class_base_class_defines}}
                        out_list[i] = TypeMetaDef({{class_base_class_name}}, static_cast<{{class_name}}*>(instance));
                        {{/class_base_class_defines}}
                    }
                    {{/class_has_base}}
                    return count;
                }

                //fields
                {{#class_field_defines}}
                static const char* GetFieldName_{{class_field_name}}() { return "{{class_field_name}}"; }
                static const char* GetFieldTypeName_{{class_field_name}}() { return "{{class_field_type}}"; }
                static void Set_{{class_field_name}}(void* instance, void* field_value) { static_cast<{{class_name}}*>(instance)->{{class_field_name}} = *static_cast<{{class_field_type}}*>(field_value); }
                static void* Get_{{class_field_name}}(void* instance) { return static_cast<void*>(&(static_cast<{{class_name}}*>(instance)->{{class_field_name}})); }
                static bool IsArray_{{class_field_name}}() { {{#class_field_is_vector}}return true;{{/class_field_is_vector}}{{^class_field_is_vector}}return false;{{/class_field_is_vector}} }
                {{/class_field_defines}}
            };
        }//namespace TypeFieldReflectionOperator

        void TypeWrapperRegister_{{class_name}}()
        {
            {{#class_field_defines}}
            FieldFunctionTuple* f_field_function_tuple_{{class_field_name}} = new FieldFunctionTuple(
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::Set_{{class_field_name}},
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::Get_{{class_field_name}},
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::GetClassName,
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::GetFieldName_{{class_field_name}},
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::GetFieldTypeName_{{class_field_name}},
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::IsArray_{{class_field_name}});
            REGISTER_FIELD_TO_MAP("{{class_name}}", f_field_function_tuple_{{class_field_name}});
            {{/class_field_defines}}

            {{#class_need_register}}
            ClassFunctionTuple* f_class_function_tuple_{{class_name}} = new ClassFunctionTuple(
                &TypeFieldReflectionOperator::Type{{class_name}}Operator::Get{{class_name}}BaseClassReflectionInstanceList);
            REGISTER_BASE_CLASS_TO_MAP("{{class_name}}", f_class_function_tuple_{{class_name}});
            {{/class_need_register}}
        }
        {{/class_defines}}
        
        namespace TypeWrappersRegister
        {
            {{#class_defines}}
            void {{class_name}}() { TypeWrapperRegister_{{class_name}}(); }
            {{/class_defines}}
        }//namespace TypeWrappersRegister
    }//namespace Reflection
}//namespace XuanWu